title,number,state,created_at,user,commits,additions,deletions,changed_files,closed_at,body
"Use Feature-Policy header name for now",40652,closed,2020-11-19T15:09:42Z,p8,1,10,5,3,2020-11-19T16:15:31Z,"### Summary    In 90e710d7672b928ce6bb3ec05f8f2c05338be6c9 the FeaturePolicy middleware was renamed  to PermissionsPolicy as this will be new name of the header as used by browsers.  The Permissions-Policy header requires a different implementation and  isn't yet supported by all browsers. To avoid having to rename the  middleware in the future  we keep the new name for the Middleware  but  use the old implementation and header name.    ### Other Information    The permissions-policy changed the format of the data to a structured header:  w3c/webappsec-permissions-policy#383    So the following:  ```   \"usb 'self'; autoplay https://example.com; payment https://secure.example.com\"   ```  Would need to change to  ```     \"usb=(self)  autoplay=(https://example.com)  payment=(https://secure.example.com)\"   ```"
"fix issue with schema:load when table definition contains partitions",40651,closed,2020-11-19T14:17:15Z,ritikesh,1,11,2,2,2020-11-19T14:39:35Z,"`bundle exec rails db:schema:load` fails with a SQL error when the table definition contains partitions."
"nil check should pass both for :minimum and :maximum",40650,open,2020-11-19T11:40:37Z,umarsheikh,1,1,1,1,Null,"### Summary  Fixes #40642  allow_nil currently only works with :maximum  this PR makes it work for both :maximum and :minimum    "
"Fix `rails new` and `rails app:update` hanging on master bug.",40646,open,2020-11-19T00:03:36Z,vaporyhumo,2,7,0,1,Null,"### Summary    Filter PATH environment variable so script doesn't loop on itself.    Fixes: #38666   Related: #39619    When updating a rails application to the master branch  and running rails app:update  if you have bin in your PATH you would get thrown into an infinite loop.    This excludes bin from the PATH variable  so when bin/yarn is called  it does not loop on itself when calling exec \"yarn\".    Related Issue: #38666  Also briefly mentioned here: #39282 (comment)    ### Other Information    <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"Validates using proc with instance variable for minimum",40645,open,2020-11-18T18:54:40Z,tahsin352,1,21,3,2,Null,"### Summary  Fixes https://github.com/rails/rails/issues/40642  allow_nil only works with maximum. This PR enables allow_nil to work with other attributes. For example  if allow_nil is set with minimum  then it will skip validation check of minimum.  <!-- Provide a general description of the code changes in your pull  request... were there any bugs you had fixed? If so  mention them. If  these bugs have open GitHub issues  be sure to tag them here as well   to keep the conversation linked together. -->      <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"removed unnecessary duplicated require.",40644,open,2020-11-18T16:04:36Z,luccafort,1,0,1,1,Null,"### Summary    I happened to discover that the `require \"models/post\"` was a duplicate  and I was convinced that this duplicate code was an unnecessary process.  i fixed very easy careless miss.    \"models/post\" is required on line 11  so i removed it as it is useless to have a similar process on line 23."
"Fixed automatic_inverse_of",40643,open,2020-11-18T13:00:28Z,ktmouk,1,31,0,6,Null,"### Summary    - `automatic_inverse_of` cannot find inverse_name correctly if has multiple `belongs_to` to same class.   - This PR added validation that foreign_keys are same.    - Fixed: #35204"
"Fix ForkTracker on ruby <= 2.5.3",40638,closed,2020-11-17T20:15:50Z,p8,1,5,1,1,2020-11-18T18:10:42Z,"### Summary    Making the fork method private by calling `private :fork` raises a  \"no superclass method `fork'\" error when calling super in a subclass on  ruby <= 2.5.3. The error doesn't occur on ruby 2.5.4 and higher.  Making the method private by redefining doesn't raise the error.    ### Other Information    The possible fix on 2.5.4 is https://github.com/ruby/ruby/commit/75aba10d7ae24126b0f9aa561855020bdfcd8c9d    The error can be reproduced with the following script on ruby 2.5.3:  ```  class Cluster    def start      fork { puts \"forked!\" }    end  end    module CoreExt    def fork(*)      super    end  end    module CoreExtPrivate    include CoreExt    private :fork  end    ::Object.prepend(CoreExtPrivate)  Cluster.new.start  ```    Fixes #40603  "
"Raise if connection_handlers is called in legacy_connection_handling",40637,closed,2020-11-17T13:43:29Z,eileencodes,1,15,5,4,2020-11-17T14:14:13Z,"While we didn't need to deprecate any behavior when implementing  granular connection swapping it's not 100% clear to the person upgrading  that this needs to change when you switch off  `legacy_connection_handling`. The new version doesn't support  multiple handlers but before it wasn't raising an exception so it was  possible applications were still using it and hitting confusing errors.  This change ensures that if an application is using the new handling  that `connection_handlers` and `connection_handlers=` an exception will  be raised."
"Fixes rdoc formatting [ci skip]",40636,closed,2020-11-17T13:23:19Z,the-spectator,1,6,6,2,2020-11-17T15:14:46Z,"### Summary  This PR fixes the Rdoc formatting.    Before:  ![image](https://user-images.githubusercontent.com/13457494/99395119-fbbd6200-2905-11eb-80d8-ce20d4ebdfd8.png)  ![image](https://user-images.githubusercontent.com/13457494/99394972-cc0e5a00-2905-11eb-92d1-8c5877366757.png)    After:  ![image](https://user-images.githubusercontent.com/13457494/99394825-83ef3780-2905-11eb-8321-17a080d9f3c0.png)  ![After 2](https://user-images.githubusercontent.com/13457494/99394706-51ddd580-2905-11eb-9502-37e46e7dca06.png)  "
"Fix ActiveRecord::Base.connection_specification_name= on multi-db apps",40635,open,2020-11-16T21:43:37Z,eugeneius,1,39,3,2,Null,"Followup to https://github.com/rails/rails/pull/36930  which fixed this same problem for applications that don't use `connects_to`.    Calling `ApplicationRecord.connects_to` currently sets its `connection_specification_name`  which prevents changes to ActiveRecord::Base's `connection_specification_name` from applying to subclasses of ApplicationRecord. Before Rails 6.0  setting ActiveRecord::Base's `connection_specification_name` always affected all models without their own connection."
"Save model attachment on reload",40632,open,2020-11-16T16:51:28Z,tahsin352,1,5,5,3,Null,"### Summary  Fixes https://github.com/rails/rails/issues/40630  Save uploaded model attachments when reloading the model within a transaction.  <!-- Provide a general description of the code changes in your pull  request... were there any bugs you had fixed? If so  mention them. If  these bugs have open GitHub issues  be sure to tag them here as well   to keep the conversation linked together. -->      <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"issue with schema:load when a MySQL table definition contains partitions",40631,closed,2020-11-16T15:22:32Z,ritikesh,26,295,122,36,2020-11-19T14:17:37Z,"`bundle exec rails db:schema:load` fails with a SQL error when the table definition contains partitions."
"Make exclusive endless ranges produce `gt` queries",40628,closed,2020-11-16T06:58:40Z,raghubetina,1,98,5,4,2020-11-18T18:20:25Z,"Before this patch  a `where` with an **exclusive**  **endless** `Range`  argument:    ```ruby  Thing.where(id: 42...::Float::INFINITY)  ```    Produced:    ```sql  SELECT COUNT(*) FROM \"things\" WHERE \"things\".\"id\" >= ?  [[\"id\"  42]]  ```    I expected that using an exclusive endless `Range` would produce a `>`  query  equivalent to:    ```ruby  Thing.where(Thing.arel_table[:id].gt(42))  ```    Instead  it does the same thing as an _inclusive_ endless `Range`   producing a `>=` query.    By comparison (using Ruby 2.6 and 2.7s implicit beginless and endless  syntax):     - `Thing.where(id: ..42)` (inclusive  beginless) produces `<=`:        ```sql      SELECT COUNT(*) FROM \"things\" WHERE \"things\".\"id\" <= ?  [[\"id\"  42]]      ```   - `Thing.where(id: ...42)` (exclusive  beginless) produces `<`:        ```sql      SELECT COUNT(*) FROM \"photos\" WHERE \"photos\".\"id\" < ?  [[\"id\"  42]]      ```   - `Thing.where(id: 42..)` (inclusive  endless) produces `>=`:        ```sql      SELECT COUNT(*) FROM \"photos\" WHERE \"photos\".\"id\" >= ?  [[\"id\"  42]]      ```    It seems least-surprising that `Thing.where(id: 42...)` (exclusive  endless)  would produce `>`  symmetrically to the beginless exclusive behavior.    A counterargument is that `Range`s are inclusive or exclusive of their  _ending_  and not their beginning; so `42..::Float::INFINITY` and  `42...::Float::INFINITY` are the same. So it's reasonable that they  produce the same query when used as arguments to `where`.    However  I believe it's worth breaking with mathematical purity here to  complete the inequalities available without dropping down to Arel;  especially as the style becomes more popular with Ruby 2.6 and 2.7's  implicit endless and beginless `Range` syntax.    Therefore  this patch differentiates between _exclusive_ and _inclusive_  endless `Range`s when building predicates  and makes the former produce  `gt` queries instead of `gteq`.    Resolves #40627.  "
"Wrap evaluation of db/seeds.rb with the executor",40626,open,2020-11-15T16:47:22Z,jonathanhefner,1,35,76,6,Null,"Before #34953  when using the `:async` Active Job queue adapter  jobs enqueued in `db/seeds.rb`  such as Active Storage analysis jobs  would cause a hang (see #34939).  Therefore  #34953 changed all jobs enqueued in `db/seeds.rb` to use the `:inline` queue adapter instead.  (This behavior was later limited to only take effect when the `:async` adapter was configured  see #35905.)  However  inline jobs in `db/seeds.rb` cleared `CurrentAttributes` values (see #37526).  Therefore  #37568 changed the `:inline` adapter to wrap each job in its own thread  for isolation.  However  wrapping a job in its own thread affects which database connection it uses.  Thus inline jobs can no longer execute within the calling thread's database transaction  including seeing any uncommitted changes.  Additionally  if the calling thread is not wrapped with the executor  the inline job thread (which is wrapped with the executor) can deadlock on the load interlock.  And when testing (with `connection_pool.lock_thread = true`)  the inline job thread can deadlock on one of the locks added by #28083.    Therefore  this commit reverts the solutions of #34953 and #37568  and instead wraps evaluation of `db/seeds.rb` with the executor.  This eliminates the original hang from #34939  which was also due to running multiple threads and not wrapping all of them with the executor.  And  because nested calls to `executor.wrap` are ignored  any inline jobs in `db/seeds.rb` will not clear `CurrentAttributes` values.    Alternative fix for #34939.  Reverts #34953.  Reverts #35905.  Partially reverts #35896.    Alternative fix for #37526.  Reverts #37568.    Fixes #40552.    ---    It's worth noting that `rails db:seed` will no longer run `:async` adapter jobs  because those jobs will wait for a lock acquired via `executor.wrap`  and then be killed by `Concurrent::ThreadPoolExecutor` when the process exits.  However  this makes the `:async` adapter behave like all other non-`:inline` adapters  so I think it's reasonable.  If we specifically want Active Storage analysis jobs to run during `rails db:seed`  we can add something like the following to `load_seed`:    ```ruby  ActiveSupport.on_load(:active_storage_job) { self.queue_adapter = :inline }  ```    If there is interest in that  I will open a follow-up PR.  "
"Implement strict_loading for has_rich_text",40625,open,2020-11-15T16:37:58Z,tahsin352,1,18,2,4,Null,"### Summary  Implement strict_loading for has_rich_text.  <!-- Provide a general description of the code changes in your pull  request... were there any bugs you had fixed? If so  mention them. If  these bugs have open GitHub issues  be sure to tag them here as well   to keep the conversation linked together. -->    <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"Use double quotes for consistency across the file",40624,open,2020-11-15T05:14:20Z,olimart,1,1,1,1,Null,"### Summary    Use double-quotes everywhere in the generated file.  Follow-up on https://github.com/rails/rails/commit/3e0cdbeaf4e769ebd356a2c06dfae13d22283b7c    Cc. @rafaelfranca - I guess it should be \"part\" of 6.1 release cycle since the original change targets `6.1` version.  But who am I. Anyway  thanks for your contributions across some many repos 🙏     ### Other Information    <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"Add strict loading for active storage",40623,closed,2020-11-15T00:56:47Z,dcangulo,1,53,6,3,2020-11-16T15:30:52Z,"### Summary  Closes #40621  Adds `strict_loading` to ActiveStorage model.    ### Other Information  ```ruby  has_one_attached :logo  strict_loading: true  has_many_attached :images  strict_loading: true  ```  "
"Only invalidate query caches for peer connections",40622,open,2020-11-15T00:22:39Z,eugeneius,1,82,4,4,Null,"As suggested by @matthewd in https://github.com/rails/rails/pull/35089#discussion_r252103555:    > Along that line  I think I'd actually go further  and limit this to only the current-thread-owned connection _in the peer pools_ -- the corresponding same-named pool in other handlers -- not all pools.    Currently writes invalidate the query cache for all connections that are owned by the current thread  but this causes unnecessary cache misses when reading from one database and writing to another.    We only need to ensure that writes can be read from their corresponding reading connections  so only clearing the cache for connections with the same `connection_specification_name` is sufficient."
"Rename HTTP Feature Policy to Permissions Policy",40620,closed,2020-11-14T14:20:59Z,Bahanix,1,82,82,15,2020-11-18T21:24:50Z,"HTTP Feature-Policy has been renamed to Permissions-Policy:  * Original issue: https://github.com/w3c/webappsec-permissions-policy/issues/359  * PR: https://github.com/w3c/webappsec-permissions-policy/pull/379  * Doc: https://w3c.github.io/webappsec-permissions-policy/#permissions-policy-http-header-field    According to archive.org  Mozilla documentation has been updated July 14th  2020:  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy    This PR ports this renaming into Rails.    cc. @jacobbednarz who authored the feature."
"Add support to MemoryStore to clear specific namespaces.",40618,open,2020-11-14T08:08:50Z,DougEdey,1,30,2,3,Null,"### Summary    I was implementing some namespace based caching and found that the `ActiveSupport::Cache::MemoryStore` that I used in tests behaved differently to the `RedisCacheStore` (used in development/production) when calling `.clear`  while adding and deleting based on namespace behaves the same  the Memory store just clears everything.    I originally went with a loop over the raw `@data.keys`  because `delete_matched` is instrumented  but then I realized that     (1) `RedisCacheStore.clear(namespace:)` uses `delete_matched`  (2) We probably want to expose this instrumentation if developers want it.    ### Other Information    This was fixed in `RedisCacheStore` a while ago: https://github.com/rails/rails/pull/32573    "
"CI against erubi 1.10.0",40617,closed,2020-11-14T05:42:28Z,amatsuda,1,1,1,1,2020-11-16T16:15:37Z,"A new version of Erubi was released: https://rubygems.org/gems/erubi    This release includes [an internal refactoring](https://github.com/jeremyevans/erubi/commit/4dc81c21) that once introduced an incompatibility for Action View that was [two months later reverted back](https://github.com/jeremyevans/erubi/commit/16ca175) because the maintainer luckily discovered the breakage while pareparing for the release.    I know it's only a week since we [upgraded everything](fc73becc3cbfa574af9d7f8359d060728375d186)  but now that the gem has been released  and it'd be bundled on Rails 6.1 users' apps  we'd better CI against this version.    Thank you @jeremyevans for letting me know about this release."
"use listen v3.3.1",40616,closed,2020-11-13T23:26:02Z,ColinDKelley,1,3,3,2,2020-11-16T17:48:19Z,"### Summary    We discovered a race condition in `listen` v3.3.0 where if code ever calls `listener.stop` before `listener.start`  an exception is raised. This is fixed in `listen` [v3.3.1](https://github.com/guard/listen/releases/tag/v3.3.1).  - Bumps `listen` gem to v3.3.1.  "
"Fix preventing_writes for granular swapping",40615,closed,2020-11-13T21:30:42Z,eileencodes,1,90,14,4,2020-11-17T18:24:54Z,"When we implemented granular connection swapping we treated  `prevent_writes` similarly to `role` and `shard`. However  it's a little  different. `prevent_writes` is a feature of a conneciton whereas `role`  and `shared` are used to lookup a connection. A writing connection that  wants to prevent writes doesn't get stored in the pool as such   `prevent_writes` is added as a way to change behavior of a connection.    Because of this when `preventing_writes?` calls  `ActiveRecord::Base.current_preventing_writes` the lookup is on the  wrong class if we're using granular swapping. Instead we need to lookup  the `prevent_writes` from the class that called `connected_to` rather  than `ActiveRecord::Base`. To do that I've done the following:    1) Added access to the `connection_specification_name` as `owner_name`  on the pool so the connection can access it.  2) Call `safe_constantize` on the `owner_name` since the  `connected_to_stack` stores the class as a class and not a string.  3) Now we can call `safe_constantize` on the klass that we got out of  the pool to be able to look up the correct `prevent_writes` from the  stack.    I benchmarked this and the two versions were pretty close  although this  is a little bit slower.    I tried a few other ways of fixing this. I first tried adding  `prevent_writes` to the connection in `retrieve_connection` based on the  `current_preventing_writes` but then that behavior only worked correctly  for ActiveRecord connections. If we already had a connection and  `retrieve_connection` isn't called then the tests testing that behavior  would fail. This was the best way to not introduce confusing differences  between global and granular connections.    Fixes #40559    cc/ @seejohnrun "
"Add support for sqlcmd instead of sqsh on sql server",40612,closed,2020-11-12T18:04:23Z,tahsin352,1,5,5,2,2020-11-12T18:37:45Z,"### Summary  Fixes for #40611 to suggest that Rails move from sqsh to sqlcmd  which Microsoft offers on Windows  Mac  and Linux.  <!-- Provide a general description of the code changes in your pull  request... were there any bugs you had fixed? If so  mention them. If  these bugs have open GitHub issues  be sure to tag them here as well   to keep the conversation linked together. -->    <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"Identical type for primary key and reference on sqlite3",40610,open,2020-11-12T07:18:06Z,tahsin352,1,1,1,1,Null,"### Summary  While working on issue https://github.com/rails/rails/issues/40583  I found that after this https://github.com/rails/rails/commit/b92ae610699f991e4616409815fa1e7f134dacc5 change  we need to use identical type for primary_key and reference on sqlite3. It was done for mysql2 and postgresql on https://github.com/rails/rails/commit/14db455156cf822f1af738f24528200ae19efc1c; This PR updates reference type to `:bigint` for sqlite3.  <!-- Provide a general description of the code changes in your pull  request... were there any bugs you had fixed? If so  mention them. If  these bugs have open GitHub issues  be sure to tag them here as well   to keep the conversation linked together. -->      <!-- If there's anything else that's important and relevant to your pull  request  mention that information here. This could include  benchmarks  or other information.    If you are updating any of the CHANGELOG files or are asked to update the  CHANGELOG files by reviewers  please add the CHANGELOG entry at the top of the file.    Finally  if your pull request affects documentation or any non-code  changes  guidelines for those changes are [available  here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)    Thanks for contributing to Rails! -->  "
"Fix QueryCache concurrent issue",40609,open,2020-11-12T05:54:21Z,kvokka,1,1,1,1,Null,"<del>This should fix it. By the way  Mutex_m is a stdlib goodie  so i did not bring any extra dependency.</del>    Re-use common lock  running the patch as a canary in production (since idk how to properly reproduce it locally). Will upd later    Close #40608"
"Fix boolean casting for False",40606,closed,2020-11-11T22:39:11Z,ionut998,1,4,0,2,2020-11-11T22:45:05Z,"### Summary  Include `False` in the list of rules for coercion of user input.  Casting the string `false` or `FALSE` to boolean results in a `false` value but casting `False` to boolean results in `true`    Before:  ```  ActiveRecord::Type::Boolean.new.cast(\"False\")  => true  ```    After  ```  ActiveRecord::Type::Boolean.new.cast(\"False\")  => false  ```"
"Link to API docs in AS Core Extensions guide [ci-skip]",40605,closed,2020-11-11T22:16:35Z,jonathanhefner,1,599,208,1,2020-11-13T03:31:22Z,"This links the first mention of each method to its API documentation  similar to a Wikipedia article.  Some subsequent mentions are also linked  when it suits the surrounding text.    This also modifies the text in a few places to ensure that methods are explicitly mentioned (and linked) before they appear in code examples.    ---    One of these links depends on #40604.  "
"Document Regexp#multiline? [ci-skip]",40604,closed,2020-11-11T22:16:20Z,jonathanhefner,1,8,1,1,2020-11-12T00:09:23Z,"`Regexp#multiline?` has been publicized in the Active Support Core Extensions guide [for a while now](https://guides.rubyonrails.org/v4.0/active_support_core_extensions.html#multiline-questionmark).  This commit adds matching API docs."
